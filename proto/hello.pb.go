// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hello.proto

/*
Package hello is a generated protocol buffer package.

It is generated from these files:
	proto/hello.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	DiffNotification
	DiffSubscribe
*/
package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The notification containing
type DiffNotification struct {
	ResponseData string `protobuf:"bytes,1,opt,name=responseData" json:"responseData,omitempty"`
}

func (m *DiffNotification) Reset()                    { *m = DiffNotification{} }
func (m *DiffNotification) String() string            { return proto.CompactTextString(m) }
func (*DiffNotification) ProtoMessage()               {}
func (*DiffNotification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DiffNotification) GetResponseData() string {
	if m != nil {
		return m.ResponseData
	}
	return ""
}

// The subscribe message containing the rest path, sub name.
type DiffSubscribe struct {
	Path           string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Period         int32  `protobuf:"varint,2,opt,name=period" json:"period,omitempty"`
	SubscriberName string `protobuf:"bytes,3,opt,name=subscriberName" json:"subscriberName,omitempty"`
}

func (m *DiffSubscribe) Reset()                    { *m = DiffSubscribe{} }
func (m *DiffSubscribe) String() string            { return proto.CompactTextString(m) }
func (*DiffSubscribe) ProtoMessage()               {}
func (*DiffSubscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DiffSubscribe) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DiffSubscribe) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *DiffSubscribe) GetSubscriberName() string {
	if m != nil {
		return m.SubscriberName
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "hello.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "hello.HelloReply")
	proto.RegisterType((*DiffNotification)(nil), "hello.DiffNotification")
	proto.RegisterType((*DiffSubscribe)(nil), "hello.DiffSubscribe")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/hello.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hello.proto",
}

// Client API for DiffSubscriber service

type DiffSubscriberClient interface {
	// Sends a greeting
	Subscribe(ctx context.Context, in *DiffSubscribe, opts ...grpc.CallOption) (*DiffNotification, error)
	// Sends a greeting
	SubscribeStream(ctx context.Context, in *DiffSubscribe, opts ...grpc.CallOption) (DiffSubscriber_SubscribeStreamClient, error)
}

type diffSubscriberClient struct {
	cc *grpc.ClientConn
}

func NewDiffSubscriberClient(cc *grpc.ClientConn) DiffSubscriberClient {
	return &diffSubscriberClient{cc}
}

func (c *diffSubscriberClient) Subscribe(ctx context.Context, in *DiffSubscribe, opts ...grpc.CallOption) (*DiffNotification, error) {
	out := new(DiffNotification)
	err := grpc.Invoke(ctx, "/hello.DiffSubscriber/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffSubscriberClient) SubscribeStream(ctx context.Context, in *DiffSubscribe, opts ...grpc.CallOption) (DiffSubscriber_SubscribeStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DiffSubscriber_serviceDesc.Streams[0], c.cc, "/hello.DiffSubscriber/SubscribeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &diffSubscriberSubscribeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiffSubscriber_SubscribeStreamClient interface {
	Recv() (*DiffNotification, error)
	grpc.ClientStream
}

type diffSubscriberSubscribeStreamClient struct {
	grpc.ClientStream
}

func (x *diffSubscriberSubscribeStreamClient) Recv() (*DiffNotification, error) {
	m := new(DiffNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DiffSubscriber service

type DiffSubscriberServer interface {
	// Sends a greeting
	Subscribe(context.Context, *DiffSubscribe) (*DiffNotification, error)
	// Sends a greeting
	SubscribeStream(*DiffSubscribe, DiffSubscriber_SubscribeStreamServer) error
}

func RegisterDiffSubscriberServer(s *grpc.Server, srv DiffSubscriberServer) {
	s.RegisterService(&_DiffSubscriber_serviceDesc, srv)
}

func _DiffSubscriber_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffSubscribe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffSubscriberServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.DiffSubscriber/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffSubscriberServer).Subscribe(ctx, req.(*DiffSubscribe))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiffSubscriber_SubscribeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiffSubscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiffSubscriberServer).SubscribeStream(m, &diffSubscriberSubscribeStreamServer{stream})
}

type DiffSubscriber_SubscribeStreamServer interface {
	Send(*DiffNotification) error
	grpc.ServerStream
}

type diffSubscriberSubscribeStreamServer struct {
	grpc.ServerStream
}

func (x *diffSubscriberSubscribeStreamServer) Send(m *DiffNotification) error {
	return x.ServerStream.SendMsg(m)
}

var _DiffSubscriber_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.DiffSubscriber",
	HandlerType: (*DiffSubscriberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _DiffSubscriber_Subscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeStream",
			Handler:       _DiffSubscriber_SubscribeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}

func init() { proto.RegisterFile("proto/hello.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x4f, 0x32, 0x31,
	0x14, 0xa4, 0xdf, 0x27, 0x20, 0x2f, 0x08, 0x52, 0x8d, 0x12, 0xbc, 0x90, 0x1e, 0x08, 0xa7, 0x95,
	0xa0, 0xf1, 0x64, 0x62, 0x42, 0x48, 0xf4, 0x44, 0x08, 0x1c, 0x3c, 0x97, 0xe5, 0x01, 0x4d, 0xba,
	0xb4, 0xb6, 0x25, 0xba, 0xff, 0xc3, 0x1f, 0x6c, 0x5a, 0x76, 0x75, 0xd7, 0x9b, 0xb7, 0x99, 0xc9,
	0xcc, 0x66, 0xde, 0x6c, 0xa1, 0xa3, 0x8d, 0x72, 0xea, 0x76, 0x87, 0x52, 0xaa, 0x28, 0x60, 0x5a,
	0x0d, 0x84, 0x31, 0x68, 0xbe, 0x78, 0xb0, 0xc0, 0xb7, 0x03, 0x5a, 0x47, 0x29, 0x9c, 0xec, 0x79,
	0x82, 0x5d, 0xd2, 0x27, 0xc3, 0xc6, 0x22, 0x60, 0x36, 0x00, 0xc8, 0x3c, 0x5a, 0xa6, 0xb4, 0x0b,
	0xf5, 0x04, 0xad, 0xe5, 0xdb, 0xdc, 0x94, 0x53, 0xf6, 0x00, 0xe7, 0x53, 0xb1, 0xd9, 0xcc, 0x94,
	0x13, 0x1b, 0x11, 0x73, 0x27, 0xd4, 0x9e, 0x32, 0x68, 0x1a, 0xb4, 0x5a, 0xed, 0x2d, 0x4e, 0xb9,
	0xe3, 0x59, 0xa4, 0xa4, 0xb1, 0x18, 0xce, 0x7c, 0x6e, 0x79, 0x58, 0xd9, 0xd8, 0x88, 0x15, 0xfa,
	0x12, 0x9a, 0xbb, 0x5d, 0x5e, 0xc2, 0x63, 0x7a, 0x05, 0x35, 0x8d, 0x46, 0xa8, 0x75, 0xf7, 0x5f,
	0x9f, 0x0c, 0xab, 0x8b, 0x8c, 0xd1, 0x01, 0xb4, 0x6c, 0x1e, 0x34, 0x33, 0x5f, 0xfd, 0x7f, 0x48,
	0xfd, 0x52, 0xc7, 0x4f, 0x50, 0x7f, 0x36, 0x88, 0x0e, 0x0d, 0xbd, 0x87, 0xd3, 0x25, 0x4f, 0xc3,
	0x49, 0xf4, 0x22, 0x3a, 0x8e, 0x52, 0x1c, 0xa1, 0xd7, 0x29, 0x8b, 0x5a, 0xa6, 0xac, 0x32, 0xfe,
	0x24, 0xd0, 0x2a, 0xd5, 0x34, 0xf4, 0x11, 0x1a, 0x3f, 0xa5, 0x2f, 0xb3, 0x50, 0xc9, 0xd3, 0xbb,
	0x2e, 0xa8, 0xc5, 0x61, 0x58, 0x85, 0x4e, 0xa1, 0xfd, 0xed, 0x5b, 0x3a, 0x83, 0x3c, 0xf9, 0xf3,
	0x37, 0x46, 0x64, 0x32, 0x82, 0x1b, 0xa1, 0xa2, 0xad, 0xd1, 0x71, 0x84, 0x1f, 0x3c, 0xd1, 0x12,
	0xed, 0xd1, 0xfe, 0xae, 0x8c, 0x5c, 0x4f, 0xda, 0xe1, 0x86, 0x57, 0x8f, 0xe7, 0xfe, 0xbf, 0xcf,
	0xc9, 0xaa, 0x16, 0x1e, 0xc0, 0xdd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xb8, 0x7c, 0x6c,
	0x15, 0x02, 0x00, 0x00,
}
